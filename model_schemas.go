/*
 * Open Service Broker API
 *
 * The Open Service Broker API defines an HTTP(S) interface between Platforms and Service Brokers.
 *
 * API version: master - might contain changes that are not yet released
 * Contact: open-service-broker-api@googlegroups.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gosb

import (
	"encoding/json"
)

// Schemas struct for Schemas
type Schemas struct {
	ServiceInstance *ServiceInstanceSchema `json:"service_instance,omitempty"`
	ServiceBinding *ServiceBindingSchema `json:"service_binding,omitempty"`
}

// NewSchemas instantiates a new Schemas object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSchemas() *Schemas {
	this := Schemas{}
	return &this
}

// NewSchemasWithDefaults instantiates a new Schemas object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSchemasWithDefaults() *Schemas {
	this := Schemas{}
	return &this
}

// GetServiceInstance returns the ServiceInstance field value if set, zero value otherwise.
func (o *Schemas) GetServiceInstance() ServiceInstanceSchema {
	if o == nil || o.ServiceInstance == nil {
		var ret ServiceInstanceSchema
		return ret
	}
	return *o.ServiceInstance
}

// GetServiceInstanceOk returns a tuple with the ServiceInstance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schemas) GetServiceInstanceOk() (*ServiceInstanceSchema, bool) {
	if o == nil || o.ServiceInstance == nil {
		return nil, false
	}
	return o.ServiceInstance, true
}

// HasServiceInstance returns a boolean if a field has been set.
func (o *Schemas) HasServiceInstance() bool {
	if o != nil && o.ServiceInstance != nil {
		return true
	}

	return false
}

// SetServiceInstance gets a reference to the given ServiceInstanceSchema and assigns it to the ServiceInstance field.
func (o *Schemas) SetServiceInstance(v ServiceInstanceSchema) {
	o.ServiceInstance = &v
}

// GetServiceBinding returns the ServiceBinding field value if set, zero value otherwise.
func (o *Schemas) GetServiceBinding() ServiceBindingSchema {
	if o == nil || o.ServiceBinding == nil {
		var ret ServiceBindingSchema
		return ret
	}
	return *o.ServiceBinding
}

// GetServiceBindingOk returns a tuple with the ServiceBinding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schemas) GetServiceBindingOk() (*ServiceBindingSchema, bool) {
	if o == nil || o.ServiceBinding == nil {
		return nil, false
	}
	return o.ServiceBinding, true
}

// HasServiceBinding returns a boolean if a field has been set.
func (o *Schemas) HasServiceBinding() bool {
	if o != nil && o.ServiceBinding != nil {
		return true
	}

	return false
}

// SetServiceBinding gets a reference to the given ServiceBindingSchema and assigns it to the ServiceBinding field.
func (o *Schemas) SetServiceBinding(v ServiceBindingSchema) {
	o.ServiceBinding = &v
}

func (o Schemas) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ServiceInstance != nil {
		toSerialize["service_instance"] = o.ServiceInstance
	}
	if o.ServiceBinding != nil {
		toSerialize["service_binding"] = o.ServiceBinding
	}
	return json.Marshal(toSerialize)
}

type NullableSchemas struct {
	value *Schemas
	isSet bool
}

func (v NullableSchemas) Get() *Schemas {
	return v.value
}

func (v *NullableSchemas) Set(val *Schemas) {
	v.value = val
	v.isSet = true
}

func (v NullableSchemas) IsSet() bool {
	return v.isSet
}

func (v *NullableSchemas) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchemas(val *Schemas) *NullableSchemas {
	return &NullableSchemas{value: val, isSet: true}
}

func (v NullableSchemas) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchemas) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


