/*
 * Open Service Broker API
 *
 * The Open Service Broker API defines an HTTP(S) interface between Platforms and Service Brokers.
 *
 * API version: master - might contain changes that are not yet released
 * Contact: open-service-broker-api@googlegroups.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gosb

import (
	"encoding/json"
)

// AsyncOperation struct for AsyncOperation
type AsyncOperation struct {
	Operation *string `json:"operation,omitempty"`
}

// NewAsyncOperation instantiates a new AsyncOperation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAsyncOperation() *AsyncOperation {
	this := AsyncOperation{}
	return &this
}

// NewAsyncOperationWithDefaults instantiates a new AsyncOperation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAsyncOperationWithDefaults() *AsyncOperation {
	this := AsyncOperation{}
	return &this
}

// GetOperation returns the Operation field value if set, zero value otherwise.
func (o *AsyncOperation) GetOperation() string {
	if o == nil || o.Operation == nil {
		var ret string
		return ret
	}
	return *o.Operation
}

// GetOperationOk returns a tuple with the Operation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AsyncOperation) GetOperationOk() (*string, bool) {
	if o == nil || o.Operation == nil {
		return nil, false
	}
	return o.Operation, true
}

// HasOperation returns a boolean if a field has been set.
func (o *AsyncOperation) HasOperation() bool {
	if o != nil && o.Operation != nil {
		return true
	}

	return false
}

// SetOperation gets a reference to the given string and assigns it to the Operation field.
func (o *AsyncOperation) SetOperation(v string) {
	o.Operation = &v
}

func (o AsyncOperation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Operation != nil {
		toSerialize["operation"] = o.Operation
	}
	return json.Marshal(toSerialize)
}

type NullableAsyncOperation struct {
	value *AsyncOperation
	isSet bool
}

func (v NullableAsyncOperation) Get() *AsyncOperation {
	return v.value
}

func (v *NullableAsyncOperation) Set(val *AsyncOperation) {
	v.value = val
	v.isSet = true
}

func (v NullableAsyncOperation) IsSet() bool {
	return v.isSet
}

func (v *NullableAsyncOperation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAsyncOperation(val *AsyncOperation) *NullableAsyncOperation {
	return &NullableAsyncOperation{value: val, isSet: true}
}

func (v NullableAsyncOperation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAsyncOperation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


