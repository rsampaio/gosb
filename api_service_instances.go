/*
 * Open Service Broker API
 *
 * The Open Service Broker API defines an HTTP(S) interface between Platforms and Service Brokers.
 *
 * API version: master - might contain changes that are not yet released
 * Contact: open-service-broker-api@googlegroups.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gosb

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// ServiceInstancesApiService ServiceInstancesApi service
type ServiceInstancesApiService service

type ApiServiceInstanceDeprovisionRequest struct {
	ctx _context.Context
	ApiService *ServiceInstancesApiService
	xBrokerAPIVersion *string
	instanceId string
	serviceId *string
	planId *string
	xBrokerAPIOriginatingIdentity *string
	acceptsIncomplete *bool
}

func (r ApiServiceInstanceDeprovisionRequest) XBrokerAPIVersion(xBrokerAPIVersion string) ApiServiceInstanceDeprovisionRequest {
	r.xBrokerAPIVersion = &xBrokerAPIVersion
	return r
}
func (r ApiServiceInstanceDeprovisionRequest) ServiceId(serviceId string) ApiServiceInstanceDeprovisionRequest {
	r.serviceId = &serviceId
	return r
}
func (r ApiServiceInstanceDeprovisionRequest) PlanId(planId string) ApiServiceInstanceDeprovisionRequest {
	r.planId = &planId
	return r
}
func (r ApiServiceInstanceDeprovisionRequest) XBrokerAPIOriginatingIdentity(xBrokerAPIOriginatingIdentity string) ApiServiceInstanceDeprovisionRequest {
	r.xBrokerAPIOriginatingIdentity = &xBrokerAPIOriginatingIdentity
	return r
}
func (r ApiServiceInstanceDeprovisionRequest) AcceptsIncomplete(acceptsIncomplete bool) ApiServiceInstanceDeprovisionRequest {
	r.acceptsIncomplete = &acceptsIncomplete
	return r
}

func (r ApiServiceInstanceDeprovisionRequest) Execute() (map[string]interface{}, *_nethttp.Response, error) {
	return r.ApiService.ServiceInstanceDeprovisionExecute(r)
}

/*
 * ServiceInstanceDeprovision deprovision a service instance
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param instanceId id of instance being deleted
 * @return ApiServiceInstanceDeprovisionRequest
 */
func (a *ServiceInstancesApiService) ServiceInstanceDeprovision(ctx _context.Context, instanceId string) ApiServiceInstanceDeprovisionRequest {
	return ApiServiceInstanceDeprovisionRequest{
		ApiService: a,
		ctx: ctx,
		instanceId: instanceId,
	}
}

/*
 * Execute executes the request
 * @return map[string]interface{}
 */
func (a *ServiceInstancesApiService) ServiceInstanceDeprovisionExecute(r ApiServiceInstanceDeprovisionRequest) (map[string]interface{}, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServiceInstancesApiService.ServiceInstanceDeprovision")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/service_instances/{instance_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"instance_id"+"}", _neturl.PathEscape(parameterToString(r.instanceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xBrokerAPIVersion == nil {
		return localVarReturnValue, nil, reportError("xBrokerAPIVersion is required and must be specified")
	}
	if r.serviceId == nil {
		return localVarReturnValue, nil, reportError("serviceId is required and must be specified")
	}
	if r.planId == nil {
		return localVarReturnValue, nil, reportError("planId is required and must be specified")
	}

	localVarQueryParams.Add("service_id", parameterToString(*r.serviceId, ""))
	localVarQueryParams.Add("plan_id", parameterToString(*r.planId, ""))
	if r.acceptsIncomplete != nil {
		localVarQueryParams.Add("accepts_incomplete", parameterToString(*r.acceptsIncomplete, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-Broker-API-Version"] = parameterToString(*r.xBrokerAPIVersion, "")
	if r.xBrokerAPIOriginatingIdentity != nil {
		localVarHeaderParams["X-Broker-API-Originating-Identity"] = parameterToString(*r.xBrokerAPIOriginatingIdentity, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 410 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiServiceInstanceGetRequest struct {
	ctx _context.Context
	ApiService *ServiceInstancesApiService
	xBrokerAPIVersion *string
	instanceId string
	xBrokerAPIOriginatingIdentity *string
	serviceId *string
	planId *string
}

func (r ApiServiceInstanceGetRequest) XBrokerAPIVersion(xBrokerAPIVersion string) ApiServiceInstanceGetRequest {
	r.xBrokerAPIVersion = &xBrokerAPIVersion
	return r
}
func (r ApiServiceInstanceGetRequest) XBrokerAPIOriginatingIdentity(xBrokerAPIOriginatingIdentity string) ApiServiceInstanceGetRequest {
	r.xBrokerAPIOriginatingIdentity = &xBrokerAPIOriginatingIdentity
	return r
}
func (r ApiServiceInstanceGetRequest) ServiceId(serviceId string) ApiServiceInstanceGetRequest {
	r.serviceId = &serviceId
	return r
}
func (r ApiServiceInstanceGetRequest) PlanId(planId string) ApiServiceInstanceGetRequest {
	r.planId = &planId
	return r
}

func (r ApiServiceInstanceGetRequest) Execute() (ServiceInstanceResource, *_nethttp.Response, error) {
	return r.ApiService.ServiceInstanceGetExecute(r)
}

/*
 * ServiceInstanceGet get a service instance
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param instanceId instance id of instance to fetch
 * @return ApiServiceInstanceGetRequest
 */
func (a *ServiceInstancesApiService) ServiceInstanceGet(ctx _context.Context, instanceId string) ApiServiceInstanceGetRequest {
	return ApiServiceInstanceGetRequest{
		ApiService: a,
		ctx: ctx,
		instanceId: instanceId,
	}
}

/*
 * Execute executes the request
 * @return ServiceInstanceResource
 */
func (a *ServiceInstancesApiService) ServiceInstanceGetExecute(r ApiServiceInstanceGetRequest) (ServiceInstanceResource, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ServiceInstanceResource
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServiceInstancesApiService.ServiceInstanceGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/service_instances/{instance_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"instance_id"+"}", _neturl.PathEscape(parameterToString(r.instanceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xBrokerAPIVersion == nil {
		return localVarReturnValue, nil, reportError("xBrokerAPIVersion is required and must be specified")
	}

	if r.serviceId != nil {
		localVarQueryParams.Add("service_id", parameterToString(*r.serviceId, ""))
	}
	if r.planId != nil {
		localVarQueryParams.Add("plan_id", parameterToString(*r.planId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-Broker-API-Version"] = parameterToString(*r.xBrokerAPIVersion, "")
	if r.xBrokerAPIOriginatingIdentity != nil {
		localVarHeaderParams["X-Broker-API-Originating-Identity"] = parameterToString(*r.xBrokerAPIOriginatingIdentity, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiServiceInstanceLastOperationGetRequest struct {
	ctx _context.Context
	ApiService *ServiceInstancesApiService
	xBrokerAPIVersion *string
	instanceId string
	serviceId *string
	planId *string
	operation *string
}

func (r ApiServiceInstanceLastOperationGetRequest) XBrokerAPIVersion(xBrokerAPIVersion string) ApiServiceInstanceLastOperationGetRequest {
	r.xBrokerAPIVersion = &xBrokerAPIVersion
	return r
}
func (r ApiServiceInstanceLastOperationGetRequest) ServiceId(serviceId string) ApiServiceInstanceLastOperationGetRequest {
	r.serviceId = &serviceId
	return r
}
func (r ApiServiceInstanceLastOperationGetRequest) PlanId(planId string) ApiServiceInstanceLastOperationGetRequest {
	r.planId = &planId
	return r
}
func (r ApiServiceInstanceLastOperationGetRequest) Operation(operation string) ApiServiceInstanceLastOperationGetRequest {
	r.operation = &operation
	return r
}

func (r ApiServiceInstanceLastOperationGetRequest) Execute() (LastOperationResource, *_nethttp.Response, error) {
	return r.ApiService.ServiceInstanceLastOperationGetExecute(r)
}

/*
 * ServiceInstanceLastOperationGet get the last requested operation state for service instance
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param instanceId instance id of instance to find last operation applied to it
 * @return ApiServiceInstanceLastOperationGetRequest
 */
func (a *ServiceInstancesApiService) ServiceInstanceLastOperationGet(ctx _context.Context, instanceId string) ApiServiceInstanceLastOperationGetRequest {
	return ApiServiceInstanceLastOperationGetRequest{
		ApiService: a,
		ctx: ctx,
		instanceId: instanceId,
	}
}

/*
 * Execute executes the request
 * @return LastOperationResource
 */
func (a *ServiceInstancesApiService) ServiceInstanceLastOperationGetExecute(r ApiServiceInstanceLastOperationGetRequest) (LastOperationResource, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  LastOperationResource
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServiceInstancesApiService.ServiceInstanceLastOperationGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/service_instances/{instance_id}/last_operation"
	localVarPath = strings.Replace(localVarPath, "{"+"instance_id"+"}", _neturl.PathEscape(parameterToString(r.instanceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xBrokerAPIVersion == nil {
		return localVarReturnValue, nil, reportError("xBrokerAPIVersion is required and must be specified")
	}

	if r.serviceId != nil {
		localVarQueryParams.Add("service_id", parameterToString(*r.serviceId, ""))
	}
	if r.planId != nil {
		localVarQueryParams.Add("plan_id", parameterToString(*r.planId, ""))
	}
	if r.operation != nil {
		localVarQueryParams.Add("operation", parameterToString(*r.operation, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-Broker-API-Version"] = parameterToString(*r.xBrokerAPIVersion, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 410 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiServiceInstanceProvisionRequest struct {
	ctx _context.Context
	ApiService *ServiceInstancesApiService
	xBrokerAPIVersion *string
	instanceId string
	serviceInstanceProvisionRequestBody *ServiceInstanceProvisionRequestBody
	xBrokerAPIOriginatingIdentity *string
	acceptsIncomplete *bool
}

func (r ApiServiceInstanceProvisionRequest) XBrokerAPIVersion(xBrokerAPIVersion string) ApiServiceInstanceProvisionRequest {
	r.xBrokerAPIVersion = &xBrokerAPIVersion
	return r
}
func (r ApiServiceInstanceProvisionRequest) ServiceInstanceProvisionRequestBody(serviceInstanceProvisionRequestBody ServiceInstanceProvisionRequestBody) ApiServiceInstanceProvisionRequest {
	r.serviceInstanceProvisionRequestBody = &serviceInstanceProvisionRequestBody
	return r
}
func (r ApiServiceInstanceProvisionRequest) XBrokerAPIOriginatingIdentity(xBrokerAPIOriginatingIdentity string) ApiServiceInstanceProvisionRequest {
	r.xBrokerAPIOriginatingIdentity = &xBrokerAPIOriginatingIdentity
	return r
}
func (r ApiServiceInstanceProvisionRequest) AcceptsIncomplete(acceptsIncomplete bool) ApiServiceInstanceProvisionRequest {
	r.acceptsIncomplete = &acceptsIncomplete
	return r
}

func (r ApiServiceInstanceProvisionRequest) Execute() (ServiceInstanceProvisionResponse, *_nethttp.Response, error) {
	return r.ApiService.ServiceInstanceProvisionExecute(r)
}

/*
 * ServiceInstanceProvision provision a service instance
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param instanceId instance id of instance to provision
 * @return ApiServiceInstanceProvisionRequest
 */
func (a *ServiceInstancesApiService) ServiceInstanceProvision(ctx _context.Context, instanceId string) ApiServiceInstanceProvisionRequest {
	return ApiServiceInstanceProvisionRequest{
		ApiService: a,
		ctx: ctx,
		instanceId: instanceId,
	}
}

/*
 * Execute executes the request
 * @return ServiceInstanceProvisionResponse
 */
func (a *ServiceInstancesApiService) ServiceInstanceProvisionExecute(r ApiServiceInstanceProvisionRequest) (ServiceInstanceProvisionResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ServiceInstanceProvisionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServiceInstancesApiService.ServiceInstanceProvision")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/service_instances/{instance_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"instance_id"+"}", _neturl.PathEscape(parameterToString(r.instanceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xBrokerAPIVersion == nil {
		return localVarReturnValue, nil, reportError("xBrokerAPIVersion is required and must be specified")
	}
	if r.serviceInstanceProvisionRequestBody == nil {
		return localVarReturnValue, nil, reportError("serviceInstanceProvisionRequestBody is required and must be specified")
	}

	if r.acceptsIncomplete != nil {
		localVarQueryParams.Add("accepts_incomplete", parameterToString(*r.acceptsIncomplete, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-Broker-API-Version"] = parameterToString(*r.xBrokerAPIVersion, "")
	if r.xBrokerAPIOriginatingIdentity != nil {
		localVarHeaderParams["X-Broker-API-Originating-Identity"] = parameterToString(*r.xBrokerAPIOriginatingIdentity, "")
	}
	// body params
	localVarPostBody = r.serviceInstanceProvisionRequestBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiServiceInstanceUpdateRequest struct {
	ctx _context.Context
	ApiService *ServiceInstancesApiService
	xBrokerAPIVersion *string
	instanceId string
	serviceInstanceUpdateRequestBody *ServiceInstanceUpdateRequestBody
	xBrokerAPIOriginatingIdentity *string
	acceptsIncomplete *bool
}

func (r ApiServiceInstanceUpdateRequest) XBrokerAPIVersion(xBrokerAPIVersion string) ApiServiceInstanceUpdateRequest {
	r.xBrokerAPIVersion = &xBrokerAPIVersion
	return r
}
func (r ApiServiceInstanceUpdateRequest) ServiceInstanceUpdateRequestBody(serviceInstanceUpdateRequestBody ServiceInstanceUpdateRequestBody) ApiServiceInstanceUpdateRequest {
	r.serviceInstanceUpdateRequestBody = &serviceInstanceUpdateRequestBody
	return r
}
func (r ApiServiceInstanceUpdateRequest) XBrokerAPIOriginatingIdentity(xBrokerAPIOriginatingIdentity string) ApiServiceInstanceUpdateRequest {
	r.xBrokerAPIOriginatingIdentity = &xBrokerAPIOriginatingIdentity
	return r
}
func (r ApiServiceInstanceUpdateRequest) AcceptsIncomplete(acceptsIncomplete bool) ApiServiceInstanceUpdateRequest {
	r.acceptsIncomplete = &acceptsIncomplete
	return r
}

func (r ApiServiceInstanceUpdateRequest) Execute() (map[string]interface{}, *_nethttp.Response, error) {
	return r.ApiService.ServiceInstanceUpdateExecute(r)
}

/*
 * ServiceInstanceUpdate update a service instance
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param instanceId instance id of instance to update
 * @return ApiServiceInstanceUpdateRequest
 */
func (a *ServiceInstancesApiService) ServiceInstanceUpdate(ctx _context.Context, instanceId string) ApiServiceInstanceUpdateRequest {
	return ApiServiceInstanceUpdateRequest{
		ApiService: a,
		ctx: ctx,
		instanceId: instanceId,
	}
}

/*
 * Execute executes the request
 * @return map[string]interface{}
 */
func (a *ServiceInstancesApiService) ServiceInstanceUpdateExecute(r ApiServiceInstanceUpdateRequest) (map[string]interface{}, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServiceInstancesApiService.ServiceInstanceUpdate")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/service_instances/{instance_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"instance_id"+"}", _neturl.PathEscape(parameterToString(r.instanceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xBrokerAPIVersion == nil {
		return localVarReturnValue, nil, reportError("xBrokerAPIVersion is required and must be specified")
	}
	if r.serviceInstanceUpdateRequestBody == nil {
		return localVarReturnValue, nil, reportError("serviceInstanceUpdateRequestBody is required and must be specified")
	}

	if r.acceptsIncomplete != nil {
		localVarQueryParams.Add("accepts_incomplete", parameterToString(*r.acceptsIncomplete, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-Broker-API-Version"] = parameterToString(*r.xBrokerAPIVersion, "")
	if r.xBrokerAPIOriginatingIdentity != nil {
		localVarHeaderParams["X-Broker-API-Originating-Identity"] = parameterToString(*r.xBrokerAPIOriginatingIdentity, "")
	}
	// body params
	localVarPostBody = r.serviceInstanceUpdateRequestBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
