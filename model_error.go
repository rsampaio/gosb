/*
 * Open Service Broker API
 *
 * The Open Service Broker API defines an HTTP(S) interface between Platforms and Service Brokers.
 *
 * API version: master - might contain changes that are not yet released
 * Contact: open-service-broker-api@googlegroups.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gosb

import (
	"encoding/json"
)

// Error See [Service Broker Errors](https://github.com/openservicebrokerapi/servicebroker/blob/master/spec.md#service-broker-errors) for more details.
type Error struct {
	Error *string `json:"error,omitempty"`
	Description *string `json:"description,omitempty"`
	InstanceUsable *bool `json:"instance_usable,omitempty"`
	UpdateRepeatable *bool `json:"update_repeatable,omitempty"`
}

// NewError instantiates a new Error object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewError() *Error {
	this := Error{}
	return &this
}

// NewErrorWithDefaults instantiates a new Error object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewErrorWithDefaults() *Error {
	this := Error{}
	return &this
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *Error) GetError() string {
	if o == nil || o.Error == nil {
		var ret string
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Error) GetErrorOk() (*string, bool) {
	if o == nil || o.Error == nil {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *Error) HasError() bool {
	if o != nil && o.Error != nil {
		return true
	}

	return false
}

// SetError gets a reference to the given string and assigns it to the Error field.
func (o *Error) SetError(v string) {
	o.Error = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Error) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Error) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Error) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Error) SetDescription(v string) {
	o.Description = &v
}

// GetInstanceUsable returns the InstanceUsable field value if set, zero value otherwise.
func (o *Error) GetInstanceUsable() bool {
	if o == nil || o.InstanceUsable == nil {
		var ret bool
		return ret
	}
	return *o.InstanceUsable
}

// GetInstanceUsableOk returns a tuple with the InstanceUsable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Error) GetInstanceUsableOk() (*bool, bool) {
	if o == nil || o.InstanceUsable == nil {
		return nil, false
	}
	return o.InstanceUsable, true
}

// HasInstanceUsable returns a boolean if a field has been set.
func (o *Error) HasInstanceUsable() bool {
	if o != nil && o.InstanceUsable != nil {
		return true
	}

	return false
}

// SetInstanceUsable gets a reference to the given bool and assigns it to the InstanceUsable field.
func (o *Error) SetInstanceUsable(v bool) {
	o.InstanceUsable = &v
}

// GetUpdateRepeatable returns the UpdateRepeatable field value if set, zero value otherwise.
func (o *Error) GetUpdateRepeatable() bool {
	if o == nil || o.UpdateRepeatable == nil {
		var ret bool
		return ret
	}
	return *o.UpdateRepeatable
}

// GetUpdateRepeatableOk returns a tuple with the UpdateRepeatable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Error) GetUpdateRepeatableOk() (*bool, bool) {
	if o == nil || o.UpdateRepeatable == nil {
		return nil, false
	}
	return o.UpdateRepeatable, true
}

// HasUpdateRepeatable returns a boolean if a field has been set.
func (o *Error) HasUpdateRepeatable() bool {
	if o != nil && o.UpdateRepeatable != nil {
		return true
	}

	return false
}

// SetUpdateRepeatable gets a reference to the given bool and assigns it to the UpdateRepeatable field.
func (o *Error) SetUpdateRepeatable(v bool) {
	o.UpdateRepeatable = &v
}

func (o Error) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Error != nil {
		toSerialize["error"] = o.Error
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.InstanceUsable != nil {
		toSerialize["instance_usable"] = o.InstanceUsable
	}
	if o.UpdateRepeatable != nil {
		toSerialize["update_repeatable"] = o.UpdateRepeatable
	}
	return json.Marshal(toSerialize)
}

type NullableError struct {
	value *Error
	isSet bool
}

func (v NullableError) Get() *Error {
	return v.value
}

func (v *NullableError) Set(val *Error) {
	v.value = val
	v.isSet = true
}

func (v NullableError) IsSet() bool {
	return v.isSet
}

func (v *NullableError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableError(val *Error) *NullableError {
	return &NullableError{value: val, isSet: true}
}

func (v NullableError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


