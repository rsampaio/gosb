/*
 * Open Service Broker API
 *
 * The Open Service Broker API defines an HTTP(S) interface between Platforms and Service Brokers.
 *
 * API version: master - might contain changes that are not yet released
 * Contact: open-service-broker-api@googlegroups.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gosb

import (
	"encoding/json"
)

// ServiceBindingMetadata struct for ServiceBindingMetadata
type ServiceBindingMetadata struct {
	ExpiresAt *string `json:"expires_at,omitempty"`
	RenewBefore *string `json:"renew_before,omitempty"`
}

// NewServiceBindingMetadata instantiates a new ServiceBindingMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServiceBindingMetadata() *ServiceBindingMetadata {
	this := ServiceBindingMetadata{}
	return &this
}

// NewServiceBindingMetadataWithDefaults instantiates a new ServiceBindingMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServiceBindingMetadataWithDefaults() *ServiceBindingMetadata {
	this := ServiceBindingMetadata{}
	return &this
}

// GetExpiresAt returns the ExpiresAt field value if set, zero value otherwise.
func (o *ServiceBindingMetadata) GetExpiresAt() string {
	if o == nil || o.ExpiresAt == nil {
		var ret string
		return ret
	}
	return *o.ExpiresAt
}

// GetExpiresAtOk returns a tuple with the ExpiresAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceBindingMetadata) GetExpiresAtOk() (*string, bool) {
	if o == nil || o.ExpiresAt == nil {
		return nil, false
	}
	return o.ExpiresAt, true
}

// HasExpiresAt returns a boolean if a field has been set.
func (o *ServiceBindingMetadata) HasExpiresAt() bool {
	if o != nil && o.ExpiresAt != nil {
		return true
	}

	return false
}

// SetExpiresAt gets a reference to the given string and assigns it to the ExpiresAt field.
func (o *ServiceBindingMetadata) SetExpiresAt(v string) {
	o.ExpiresAt = &v
}

// GetRenewBefore returns the RenewBefore field value if set, zero value otherwise.
func (o *ServiceBindingMetadata) GetRenewBefore() string {
	if o == nil || o.RenewBefore == nil {
		var ret string
		return ret
	}
	return *o.RenewBefore
}

// GetRenewBeforeOk returns a tuple with the RenewBefore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceBindingMetadata) GetRenewBeforeOk() (*string, bool) {
	if o == nil || o.RenewBefore == nil {
		return nil, false
	}
	return o.RenewBefore, true
}

// HasRenewBefore returns a boolean if a field has been set.
func (o *ServiceBindingMetadata) HasRenewBefore() bool {
	if o != nil && o.RenewBefore != nil {
		return true
	}

	return false
}

// SetRenewBefore gets a reference to the given string and assigns it to the RenewBefore field.
func (o *ServiceBindingMetadata) SetRenewBefore(v string) {
	o.RenewBefore = &v
}

func (o ServiceBindingMetadata) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ExpiresAt != nil {
		toSerialize["expires_at"] = o.ExpiresAt
	}
	if o.RenewBefore != nil {
		toSerialize["renew_before"] = o.RenewBefore
	}
	return json.Marshal(toSerialize)
}

type NullableServiceBindingMetadata struct {
	value *ServiceBindingMetadata
	isSet bool
}

func (v NullableServiceBindingMetadata) Get() *ServiceBindingMetadata {
	return v.value
}

func (v *NullableServiceBindingMetadata) Set(val *ServiceBindingMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceBindingMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceBindingMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceBindingMetadata(val *ServiceBindingMetadata) *NullableServiceBindingMetadata {
	return &NullableServiceBindingMetadata{value: val, isSet: true}
}

func (v NullableServiceBindingMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceBindingMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


