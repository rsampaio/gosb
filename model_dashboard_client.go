/*
 * Open Service Broker API
 *
 * The Open Service Broker API defines an HTTP(S) interface between Platforms and Service Brokers.
 *
 * API version: master - might contain changes that are not yet released
 * Contact: open-service-broker-api@googlegroups.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gosb

import (
	"encoding/json"
)

// DashboardClient struct for DashboardClient
type DashboardClient struct {
	Id *string `json:"id,omitempty"`
	Secret *string `json:"secret,omitempty"`
	RedirectUri *string `json:"redirect_uri,omitempty"`
}

// NewDashboardClient instantiates a new DashboardClient object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDashboardClient() *DashboardClient {
	this := DashboardClient{}
	return &this
}

// NewDashboardClientWithDefaults instantiates a new DashboardClient object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDashboardClientWithDefaults() *DashboardClient {
	this := DashboardClient{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DashboardClient) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardClient) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DashboardClient) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *DashboardClient) SetId(v string) {
	o.Id = &v
}

// GetSecret returns the Secret field value if set, zero value otherwise.
func (o *DashboardClient) GetSecret() string {
	if o == nil || o.Secret == nil {
		var ret string
		return ret
	}
	return *o.Secret
}

// GetSecretOk returns a tuple with the Secret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardClient) GetSecretOk() (*string, bool) {
	if o == nil || o.Secret == nil {
		return nil, false
	}
	return o.Secret, true
}

// HasSecret returns a boolean if a field has been set.
func (o *DashboardClient) HasSecret() bool {
	if o != nil && o.Secret != nil {
		return true
	}

	return false
}

// SetSecret gets a reference to the given string and assigns it to the Secret field.
func (o *DashboardClient) SetSecret(v string) {
	o.Secret = &v
}

// GetRedirectUri returns the RedirectUri field value if set, zero value otherwise.
func (o *DashboardClient) GetRedirectUri() string {
	if o == nil || o.RedirectUri == nil {
		var ret string
		return ret
	}
	return *o.RedirectUri
}

// GetRedirectUriOk returns a tuple with the RedirectUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardClient) GetRedirectUriOk() (*string, bool) {
	if o == nil || o.RedirectUri == nil {
		return nil, false
	}
	return o.RedirectUri, true
}

// HasRedirectUri returns a boolean if a field has been set.
func (o *DashboardClient) HasRedirectUri() bool {
	if o != nil && o.RedirectUri != nil {
		return true
	}

	return false
}

// SetRedirectUri gets a reference to the given string and assigns it to the RedirectUri field.
func (o *DashboardClient) SetRedirectUri(v string) {
	o.RedirectUri = &v
}

func (o DashboardClient) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Secret != nil {
		toSerialize["secret"] = o.Secret
	}
	if o.RedirectUri != nil {
		toSerialize["redirect_uri"] = o.RedirectUri
	}
	return json.Marshal(toSerialize)
}

type NullableDashboardClient struct {
	value *DashboardClient
	isSet bool
}

func (v NullableDashboardClient) Get() *DashboardClient {
	return v.value
}

func (v *NullableDashboardClient) Set(val *DashboardClient) {
	v.value = val
	v.isSet = true
}

func (v NullableDashboardClient) IsSet() bool {
	return v.isSet
}

func (v *NullableDashboardClient) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDashboardClient(val *DashboardClient) *NullableDashboardClient {
	return &NullableDashboardClient{value: val, isSet: true}
}

func (v NullableDashboardClient) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDashboardClient) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


