
/*
 * Open Service Broker API
 *
 * The Open Service Broker API defines an HTTP(S) interface between Platforms and Service Brokers.
 *
 * API version: master - might contain changes that are not yet released
 * Contact: open-service-broker-api@googlegroups.com
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package gosb

import (
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"fmt"
	"github.com/antihax/optional"
)

// Linger please
var (
	_ context.Context
)

type ServiceBindingsApiService service
/*
ServiceBindingsApiService generate a service binding
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param body parameters for the requested service binding
 * @param xBrokerAPIVersion version number of the Service Broker API that the Platform will use
 * @param instanceId instance id of instance to create a binding on
 * @param bindingId binding id of binding to create
 * @param optional nil or *ServiceBindingsApiServiceBindingBindingOpts - Optional Parameters:
     * @param "XBrokerAPIOriginatingIdentity" (optional.String) -  identity of the user that initiated the request from the Platform
     * @param "AcceptsIncomplete" (optional.Bool) -  asynchronous operations supported
@return ServiceBindingResponse
*/

type ServiceBindingsApiServiceBindingBindingOpts struct {
    XBrokerAPIOriginatingIdentity optional.String
    AcceptsIncomplete optional.Bool
}

func (a *ServiceBindingsApiService) ServiceBindingBinding(ctx context.Context, body ServiceBindingRequest, xBrokerAPIVersion string, instanceId string, bindingId string, localVarOptionals *ServiceBindingsApiServiceBindingBindingOpts) (ServiceBindingResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Put")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue ServiceBindingResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/v2/service_instances/{instance_id}/service_bindings/{binding_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"instance_id"+"}", fmt.Sprintf("%v", instanceId), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"binding_id"+"}", fmt.Sprintf("%v", bindingId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.AcceptsIncomplete.IsSet() {
		localVarQueryParams.Add("accepts_incomplete", parameterToString(localVarOptionals.AcceptsIncomplete.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	localVarHeaderParams["X-Broker-API-Version"] = parameterToString(xBrokerAPIVersion, "")
	if localVarOptionals != nil && localVarOptionals.XBrokerAPIOriginatingIdentity.IsSet() {
		localVarHeaderParams["X-Broker-API-Originating-Identity"] = parameterToString(localVarOptionals.XBrokerAPIOriginatingIdentity.Value(), "")
	}
	// body params
	localVarPostBody = &body
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v ServiceBindingResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 201 {
			var v ServiceBindingResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 202 {
			var v AsyncOperation
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 400 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 401 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 409 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 422 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
ServiceBindingsApiService get a service binding
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param xBrokerAPIVersion version number of the Service Broker API that the Platform will use
 * @param instanceId instance id of instance associated with the binding
 * @param bindingId binding id of binding to fetch
 * @param optional nil or *ServiceBindingsApiServiceBindingGetOpts - Optional Parameters:
     * @param "XBrokerAPIOriginatingIdentity" (optional.String) -  identity of the user that initiated the request from the Platform
     * @param "ServiceId" (optional.String) -  id of the service associated with the instance
     * @param "PlanId" (optional.String) -  id of the plan associated with the instance
@return ServiceBindingResource
*/

type ServiceBindingsApiServiceBindingGetOpts struct {
    XBrokerAPIOriginatingIdentity optional.String
    ServiceId optional.String
    PlanId optional.String
}

func (a *ServiceBindingsApiService) ServiceBindingGet(ctx context.Context, xBrokerAPIVersion string, instanceId string, bindingId string, localVarOptionals *ServiceBindingsApiServiceBindingGetOpts) (ServiceBindingResource, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue ServiceBindingResource
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/v2/service_instances/{instance_id}/service_bindings/{binding_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"instance_id"+"}", fmt.Sprintf("%v", instanceId), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"binding_id"+"}", fmt.Sprintf("%v", bindingId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.ServiceId.IsSet() {
		localVarQueryParams.Add("service_id", parameterToString(localVarOptionals.ServiceId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PlanId.IsSet() {
		localVarQueryParams.Add("plan_id", parameterToString(localVarOptionals.PlanId.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	localVarHeaderParams["X-Broker-API-Version"] = parameterToString(xBrokerAPIVersion, "")
	if localVarOptionals != nil && localVarOptionals.XBrokerAPIOriginatingIdentity.IsSet() {
		localVarHeaderParams["X-Broker-API-Originating-Identity"] = parameterToString(localVarOptionals.XBrokerAPIOriginatingIdentity.Value(), "")
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v ServiceBindingResource
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 404 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
ServiceBindingsApiService get the last requested operation state for service binding
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param xBrokerAPIVersion version number of the Service Broker API that the Platform will use
 * @param instanceId instance id of instance to find last operation applied to it
 * @param bindingId binding id of service binding to find last operation applied to it
 * @param optional nil or *ServiceBindingsApiServiceBindingLastOperationGetOpts - Optional Parameters:
     * @param "ServiceId" (optional.String) -  id of the service associated with the instance
     * @param "PlanId" (optional.String) -  id of the plan associated with the instance
     * @param "Operation" (optional.String) -  a provided identifier for the operation
@return LastOperationResource
*/

type ServiceBindingsApiServiceBindingLastOperationGetOpts struct {
    ServiceId optional.String
    PlanId optional.String
    Operation optional.String
}

func (a *ServiceBindingsApiService) ServiceBindingLastOperationGet(ctx context.Context, xBrokerAPIVersion string, instanceId string, bindingId string, localVarOptionals *ServiceBindingsApiServiceBindingLastOperationGetOpts) (LastOperationResource, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue LastOperationResource
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/v2/service_instances/{instance_id}/service_bindings/{binding_id}/last_operation"
	localVarPath = strings.Replace(localVarPath, "{"+"instance_id"+"}", fmt.Sprintf("%v", instanceId), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"binding_id"+"}", fmt.Sprintf("%v", bindingId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.ServiceId.IsSet() {
		localVarQueryParams.Add("service_id", parameterToString(localVarOptionals.ServiceId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PlanId.IsSet() {
		localVarQueryParams.Add("plan_id", parameterToString(localVarOptionals.PlanId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Operation.IsSet() {
		localVarQueryParams.Add("operation", parameterToString(localVarOptionals.Operation.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	localVarHeaderParams["X-Broker-API-Version"] = parameterToString(xBrokerAPIVersion, "")
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v LastOperationResource
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 400 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 401 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 404 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 410 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
ServiceBindingsApiService deprovision a service binding
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param xBrokerAPIVersion version number of the Service Broker API that the Platform will use
 * @param instanceId id of the instance associated with the binding being deleted
 * @param bindingId id of the binding being deleted
 * @param serviceId id of the service associated with the instance for which a binding is being deleted
 * @param planId id of the plan associated with the instance for which a binding is being deleted
 * @param optional nil or *ServiceBindingsApiServiceBindingUnbindingOpts - Optional Parameters:
     * @param "XBrokerAPIOriginatingIdentity" (optional.String) -  identity of the user that initiated the request from the Platform
     * @param "AcceptsIncomplete" (optional.Bool) -  asynchronous operations supported
@return Object
*/

type ServiceBindingsApiServiceBindingUnbindingOpts struct {
    XBrokerAPIOriginatingIdentity optional.String
    AcceptsIncomplete optional.Bool
}

func (a *ServiceBindingsApiService) ServiceBindingUnbinding(ctx context.Context, xBrokerAPIVersion string, instanceId string, bindingId string, serviceId string, planId string, localVarOptionals *ServiceBindingsApiServiceBindingUnbindingOpts) (Object, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Delete")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue Object
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/v2/service_instances/{instance_id}/service_bindings/{binding_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"instance_id"+"}", fmt.Sprintf("%v", instanceId), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"binding_id"+"}", fmt.Sprintf("%v", bindingId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("service_id", parameterToString(serviceId, ""))
	localVarQueryParams.Add("plan_id", parameterToString(planId, ""))
	if localVarOptionals != nil && localVarOptionals.AcceptsIncomplete.IsSet() {
		localVarQueryParams.Add("accepts_incomplete", parameterToString(localVarOptionals.AcceptsIncomplete.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	localVarHeaderParams["X-Broker-API-Version"] = parameterToString(xBrokerAPIVersion, "")
	if localVarOptionals != nil && localVarOptionals.XBrokerAPIOriginatingIdentity.IsSet() {
		localVarHeaderParams["X-Broker-API-Originating-Identity"] = parameterToString(localVarOptionals.XBrokerAPIOriginatingIdentity.Value(), "")
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v Object
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 202 {
			var v AsyncOperation
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 400 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 401 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 410 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 422 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
